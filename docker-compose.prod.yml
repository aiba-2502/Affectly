services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: kokoro_log_development
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    # メモリ制限を設定
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: bash -c "bundle install && bundle exec rails server -b 0.0.0.0"
    volumes:
      - ./backend:/app
      - bundle_data:/usr/local/bundle
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_HOST: db
      DATABASE_USER: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: kokoro_log_development
      RAILS_ENV: development
      # メモリ使用量を制限
      RUBY_GC_HEAP_GROWTH_FACTOR: 1.1
      RUBY_GC_MALLOC_LIMIT: 16000000
      RUBY_GC_MALLOC_LIMIT_MAX: 32000000
      RUBY_GC_OLDMALLOC_LIMIT: 16000000
      RUBY_GC_OLDMALLOC_LIMIT_MAX: 32000000
    # メモリ制限を設定
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 256M
    stdin_open: true
    tty: true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: sh -c "npm install && npm run dev"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      # Node.jsのメモリ制限
      NODE_OPTIONS: "--max-old-space-size=256"
    # メモリ制限を設定
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 256M
    stdin_open: true
    tty: true

volumes:
  postgres_data:
  bundle_data:
  frontend_node_modules: