services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: kokoro_log_development
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MongoDB - 将来的に使用する可能性があるため保持（現在は未使用）
  # mongodb:
  #   image: mongo:7.0
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: password
  #     MONGO_INITDB_DATABASE: kokoro_log_development
  #   volumes:
  #     - mongodb_data:/data/db
  #   ports:
  #     - "27017:27017"
  #   healthcheck:
  #     test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  # Redis - 将来的に使用する可能性があるため保持（現在は未使用）
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: bash -c "bundle install && bundle exec rails server -b 0.0.0.0"
    volumes:
      - ./backend:/app
      - bundle_data:/usr/local/bundle
      - node_modules:/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      # MongoDB/Redisは現在未使用のためコメントアウト
      # mongodb:
      #   condition: service_healthy
      # redis:
      #   condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      # 環境変数の優先順位: docker-compose.yml > .env file
      DATABASE_HOST: db
      DATABASE_USER: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: kokoro_log_development
      RAILS_ENV: development
      JWT_SECRET_KEY: development_secret_key_12345678901234567890
    stdin_open: true
    tty: true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: sh -c "npm install && npm run dev:webpack & sleep 15 && node scripts/precompile.js && wait"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    ports:
      - "3001:3000"
    env_file:
      - ./frontend/.env
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      INTERNAL_API_URL: http://web:3000
    stdin_open: true
    tty: true

volumes:
  postgres_data:
  # MongoDB/Redisボリューム - 将来的に使用する可能性があるため保持
  # mongodb_data:
  # redis_data:
  bundle_data:
  node_modules:
  frontend_node_modules:
  frontend_next: